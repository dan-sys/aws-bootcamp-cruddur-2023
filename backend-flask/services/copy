#!/usr/bin/env python3

import boto3
import sys
import json
import os
import datetime

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, '..', '..', '..'))
sys.path.append(parent_path)
# from lib.db import db
# from lib.ddb import Ddb
from message_groups import MessageGroups


attrs = {
  'endpoint_url': 'http://localhost:8000'
}

if len(sys.argv) == 2:
  if "prod" in sys.argv[1]:
    attrs = {}

# ddb = boto3.client('dynamodb' ,**attrs)
# table_name = 'cruddur-message'

# def get_my_user_uuid():
#   sql = """
#     SELECT 
#       users.uuid
#     FROM users
#     WHERE
#       users.handle =%(handle)s
#   """
#   uuid = db.query_value(sql,{
#     'handle':  'ohahuru'
#   })
#   return uuid

# my_user_uuid = get_my_user_uuid()
# print(f"List-conversations ===== my-uuid: == {my_user_uuid}")

# current_year = datetime.datetime.now().year
# # define the query parameters
# query_params = {
#   'TableName': table_name,
#       'KeyConditionExpression': 'pk = :pk AND begins_with(sk,:year)',
#   'ScanIndexForward': False,
#   'ExpressionAttributeValues': {
#     ':year': {'S': str(current_year) },
#     ':pk': {'S': f"GRP#{my_user_uuid}"}
#   },
#   'ReturnConsumedCapacity': 'TOTAL'
# }

# # query the table
# response = ddb.query(**query_params)

# # print the items returned by the query
# print(f"List-conversations ========= query response == {json.dumps(response, sort_keys=True, indent=2)}")

# year = str(current_year)
# query_params = {
#       'TableName': table_name,
#       'KeyConditionExpression': 'pk = :pk AND begins_with(sk,:year)',
#       'ScanIndexForward': False,
#       'Limit': 20,
#       'ExpressionAttributeValues': {
#         ':year': {'S': year },
#         ':pk': {'S': f"GRP#{my_user_uuid}"}
#       }
#     }

# # query the table
# print(f"Query===================== {year}")
# response = ddb.query(**query_params)

# # print the items returned by the query
# print("Query22222222222222=====================")
# print(json.dumps(response, sort_keys=True, indent=2))


# # ddb = Ddb.client()
# data = Ddb.list_message_groups(my_user_uuid)
# print(f"Main data===================== {data}")

msg = MessageGroups()
msg.run("9aed7626-ec7e-4e8c-b86e-46b09c85a43f")